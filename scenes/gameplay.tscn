[gd_scene load_steps=5 format=2]

[ext_resource path="res://scenes/world.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/sprites/tiles.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


var server: Server = Server.new(JsonProtocol.new())
var client: Client = Client.new(JsonProtocol.new())


func _ready() -> void:
	add_child(self.server)
	add_child(self.client)
	
	$Button.connect(\"pressed\", self, \"_on_button_pressed\")
	
	self.server.connect(\"started\", self, \"_on_server_started\")
	self.server.connect(\"data_received\", self, \"_on_server_data_received\")
	self.server.connect(\"client_connected\", self, \"_on_server_client_connected\")
	self.server.connect(\"client_disconnected\", self, \"_on_server_client_disconnected\")
	
	self.client.connect(\"started\", self, \"_on_client_started\")
	self.client.connect(\"data_received\", self, \"_on_client_data_received\")
	self.client.connect(\"connected\", self, \"_on_client_connected\")
	self.client.connect(\"disconnected\", self, \"_on_client_disconnected\")
	
#	var chunks: Array = []
#	for i in range(10):
#		for j in range(10):
#			chunks.append(Vector2(j - 5, i - 5))
#	$World.generate_terrain(chunks)


func _on_button_pressed() -> void:
	self.server.start(1234)
	
	yield(get_tree().create_timer(1), \"timeout\")
	
	self.client.start(\"ws://127.0.0.1\", 1234)


func _on_server_started() -> void:
	print(\"SERVER> Server started\")


func _on_server_data_received(id: int, data) -> void:
	print(\"SERVER> CLIENT #%d SENT %s\" % [id, str(data)])
	self.server.send(id, data)


func _on_server_client_connected(id: int) -> void:
	print(\"SERVER> CLIENT #%d CONNECTED\" % [id])


func _on_server_client_disconnected(id: int) -> void:
	print(\"SERVER> CLIENT #%d DISCONNECTED\" % [id])
	

func _on_client_started() -> void:
	print(\"CLIENT> Client started\")


func _on_client_data_received(data) -> void:
	print(\"CLIENT> DATA RECEIVED: %s \" % [str(data)])
	
	print(data[\"message\"])


func _on_client_connected() -> void:
	print(\"CLIENT> CONNECTED\")
	
	var data: Dictionary = {
		\"message\": \"This is a message\"
	}
	
	self.client.send(data)


func _on_client_disconnected() -> void:
	print(\"CLIENT> DISCONNECTED\")


var velocity: Vector2 = Vector2.ZERO


func _input(event):
	if event.is_action_pressed(\"ui_left\"):
		velocity.x = -1.0
	elif event.is_action_pressed(\"ui_right\"):
		velocity.x = 1.0
	elif event.is_action_pressed(\"ui_down\"):
		velocity.y = 1.0
	elif event.is_action_pressed(\"ui_up\"):
		velocity.y = -1.0

	if event.is_action_released(\"ui_left\") or event.is_action_released(\"ui_right\"):
		velocity.x = 0.0
	elif event.is_action_released(\"ui_down\") or event.is_action_released(\"ui_up\"):
		velocity.y = 0.0


func _process(delta) -> void:
	$Player.position += 100 * velocity * delta
	var chunk: Vector2 = _calculate_current_chunk($Player.position)
	var chunks: Array = _calculate_chunks_around(chunk)
	$World.generate_terrain(chunks)
	
	
func _calculate_current_chunk(player_position: Vector2) -> Vector2:
	var chunk: Vector2 = Vector2(
		player_position.x / 16 / Global.WORLD_CHUNK_SIZE,
		player_position.y / 16 / Global.WORLD_CHUNK_SIZE
	)
	
	if chunk.x < 0.0:
		chunk.x -= 1.0
	if chunk.y < 0.0:
		chunk.y -= 1.0
	
	return Vector2(int(chunk.x), int(chunk.y))


func _calculate_chunks_around(chunk: Vector2) -> Array:
	var chunks: Array = []
	
	for i in range(Global.RENDER_DISTANCE):
		for j in range(Global.RENDER_DISTANCE):
			var neighbor_chunk: Vector2 = Vector2(
				chunk.x - Global.RENDER_DISTANCE / 2 + j,
				chunk.y - Global.RENDER_DISTANCE / 2 + i
			)
			
			chunks.append(neighbor_chunk)
	
	return chunks

"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 64, 40 )

[node name="Gameplay" type="Node2D"]
script = SubResource( 1 )

[node name="Button" type="Button" parent="."]
margin_left = 154.0
margin_top = 168.0
margin_right = 284.0
margin_bottom = 220.0
text = "Start"

[node name="World" parent="." instance=ExtResource( 1 )]

[node name="Player" type="Area2D" parent="."]

[node name="Camera2D" type="Camera2D" parent="Player"]
current = true

[node name="Sprite" type="Sprite" parent="Player"]
texture = ExtResource( 2 )
hframes = 49
vframes = 22
frame = 25

[node name="Sprite2" type="Sprite" parent="Player"]
modulate = Color( 1, 1, 1, 0.333333 )
scale = Vector2( 8, 8 )
texture = ExtResource( 2 )
hframes = 49
vframes = 22

[node name="CollisionShape2D" type="CollisionShape2D" parent="Player"]
shape = SubResource( 2 )
