[gd_scene load_steps=4 format=2]

[ext_resource path="res://resources/tileset.tres" type="TileSet" id=1]
[ext_resource path="res://assets/sprites/tiles.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


onready var _tileMap: TileMap = $TileMap


var _perlinNoise: OpenSimplexNoise
var _offset: Vector2


func generate_chunk(noise: OpenSimplexNoise, offset: Vector2) -> void:
	self._offset = offset
	self._perlinNoise = noise
	
	for i in Global.WORLD_CHUNK_SIZE:
		for j in Global.WORLD_CHUNK_SIZE:
			self._tileMap.set_cellv(
				Vector2(j, i), 
				_get_tile_by_noise(
					self._perlinNoise.get_noise_2d(
						offset.x * Global.WORLD_CHUNK_SIZE + j, 
						offset.y * Global.WORLD_CHUNK_SIZE + i
					)
				)
			)
	
	$Sprite.modulate = Color(randf(), randf(), randf())
	$Sprite.modulate.a = 0.5


func _get_tile_by_noise(noise: float) -> int:
	var water_tile: int = 5 * 49 + 8
	var forest_tiles: Array = [49, 50, 51, 52, 53]
	var grass_tiles: Dictionary = {
		5: 0.1,
		6: 0.05,
		7: 0.025,
		0: 0.8,
	}
	
	if noise >= 0.0 - Global.WORLD_WATER_THRESHOLD:
		if noise >= 0.7:
			return forest_tiles[rand_range(0, forest_tiles.size() - 1)]
		else:
			return _get_element_by_odds(grass_tiles)
	else:
		return water_tile


func _get_element_by_odds(elements: Dictionary) -> int:
	var random: float = randf()
	
	var total: float = 0.0
	for element in elements:
		total += elements[element]
		if random <= total:
			return element
	
	return elements.values()[elements.size() - 1]
"

[node name="WorldChunk" type="Node2D"]
script = SubResource( 1 )

[node name="TileMap" type="TileMap" parent="."]
tile_set = ExtResource( 1 )
cell_size = Vector2( 16, 16 )
cell_custom_transform = Transform2D( 16, 0, 0, 16, 0, 0 )
format = 1

[node name="Sprite" type="Sprite" parent="."]
visible = false
position = Vector2( 64, 64 )
scale = Vector2( 8, 8 )
texture = ExtResource( 2 )
hframes = 49
vframes = 22
